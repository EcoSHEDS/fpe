---
title: "FPE Annotations by EPA Region 7 Interns"
author: "Jeff Walker"
date: "`r format(Sys.Date(), '%b %d, %Y')`"
format:
  html:
    self-contained: true
    page-layout: full
    fig-width: 12
    fig-height: 8
editor_options: 
  chunk_output_type: console
execute: 
  echo: false
  warning: false
  cache: true
---

<style>
table.table {
  max-width: 800px;
}
</style>

```{r}
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
library(jsonlite)
library(lubridate)
library(janitor)
library(DT)
library(logger)
```

```{r}
fetch_station <- function(con, station_id) {
  DBI::dbGetQuery(con, "select * from stations where id = $1", list(station_id)) %>%
    as_tibble()
}

fetch_station_values <- function(con, station_id) {
  DBI::dbGetQuery(con, "
select st.name as station_name, d.station_id, s.dataset_id, s.id as series_id, s.variable_id, v.timestamp, v.value, v.flag from
datasets d
left join series s on d.id = s.dataset_id
left join values v on s.id = v.series_id
left join stations st on st.id = d.station_id
where d.station_id = $1
and d.status = 'DONE'
", list(station_id)) %>%
    as_tibble()
}

fetch_station_images <- function(con, station_id) {
  DBI::dbGetQuery(con, "
select s.name as station_name, iset.station_id, i.imageset_id, i.id as image_id, i.timestamp, i.filename, i.full_url as url from
imagesets iset
left join images i on iset.id = i.imageset_id
left join stations s on s.id = iset.station_id
where iset.station_id = $1
and i.status = 'DONE'
", list(station_id)) %>%
    as_tibble()
}

fetch_station_values_from_nwis <- function(station, start, end) {
  x_raw <- dataRetrieval::readNWISuv(station$nwis_id, parameterCd = "00060", startDate = as_date(start) - days(1), endDate = as_date(end) + days(1)) %>%
    tibble()
  dataRetrieval::renameNWISColumns(x_raw) %>%
    select(timestamp = dateTime, value = Flow_Inst, flag = Flow_Inst_cd) %>%
    mutate(
      station_name = station$name,
      station_id = station$id,
      dataset_id = "NWIS",
      series_id = NA_character_,
      variable_id = "FLOW_CFS",
      .before = "timestamp"
    ) %>%
    mutate(
      flag = na_if(flag, "A")
    ) %>%
    filter(!is.na(value))
}

fetch_station_flow_images <- function(con, station_id) {
  log_info("fetching flow images (station_id={station_id})")
  station <- fetch_station(con, station_id)
  stopifnot(nrow(station) == 1)
  
  log_info("fetching images (station_id={station_id})")
  images <- fetch_station_images(con, station_id)
  stopifnot(nrow(images) > 0)
  
  if (!is.na(station$nwis_id)) {
    start_timestamp <- min(images$timestamp)
    end_timestamp <- max(images$timestamp)
    log_info("fetching flows from NWIS (station_id={station_id}, start={start_timestamp}, end={end_timestamp})")
    values <- fetch_station_values_from_nwis(station, start_timestamp, end_timestamp)
  } else {
    log_info("fetching flows from FPE (station_id={station_id})")
    values <- fetch_station_values(con, station_id)
  }
  
  flow_values <- values %>%
    filter(variable_id == "FLOW_CFS") %>%
    filter(!is.na(value))
  
  interp_flow_values <- approxfun(flow_values$timestamp, y = flow_values$value)
  
  log_info("interpolating flows by image (station_id={station_id})")
  images %>%
    mutate(
      flow_cfs = interp_flow_values(timestamp)
    ) %>%
    arrange(timestamp) %>%
    filter(!is.na(flow_cfs))
}
```


```{r}
# epa intern ids
user_ids <- c(
  "e79e6f08-6652-4db1-bde7-b100b9d9e045",
  "b65bb5e0-070c-4dc6-952f-e77b85649709"
)

# fetch annotations from database
config <- config::get()
con <- DBI::dbConnect(
  RPostgres::Postgres(),
  host = config$db$host,
  port = config$db$port,
  dbname = config$db$database,
  user = config$db$user,
  password = config$db$password
)

annotations_db <- tbl(con, "annotations") %>%
  filter(
    user_id %in% local(user_ids),
    station_id %in% c(12, 29)
  ) %>%
  left_join(
    select(tbl(con, "stations"), station_id = id, station_name = name),
    by = "station_id"
  ) %>%
  select(annotation_id = id, user_id, station_id, station_name, duration_sec, n, url) %>%
  collect()


# flow/images datasets for west brook and avery brook generated by src/export-station.R
flow_images <- map_df(c(29, 12), \(x) fetch_station_flow_images(con, x))

DBI::dbDisconnect(con)
```

```{r}
# merge annotations with flow images
annotations <- annotations_db %>%
  rowwise() %>%
  mutate(
    data = list({
      url %>%
        read_json(simplifyVector = TRUE, flatten = TRUE) %>%
        as_tibble() %>%
        mutate(pair_id = row_number())
    })
  ) %>%
  mutate(
    flow_images = list(filter(flow_images, station_id == station_id)),
    user_id = str_sub(user_id, 1, 5),
    data = list({
      data %>%
        mutate(
          left.attributes = map_chr(left.attributes, \(x) str_c(x, collapse = ",")),
          right.attributes = map_chr(right.attributes, \(x) str_c(x, collapse = ","))
        ) %>%
        left_join(
          flow_images %>%
            select(left.imageId = image_id, left.flow_cfs = flow_cfs, left.url = url, left.timestamp = timestamp),
          by = "left.imageId"
        ) %>%
        left_join(
          flow_images %>%
            select(right.imageId = image_id, right.flow_cfs = flow_cfs, right.url = url, right.timestamp = timestamp),
          by = "right.imageId"
        ) %>%
        mutate(
          delta_flow_cfs = abs(left.flow_cfs - right.flow_cfs),
          avg_flow_cfs = (left.flow_cfs + right.flow_cfs) / 2,
          rel_delta_flow_cfs = delta_flow_cfs / avg_flow_cfs,
          true_rank = case_when(
            left.flow_cfs < right.flow_cfs ~ "RIGHT",
            left.flow_cfs > right.flow_cfs ~ "LEFT",
            left.flow_cfs == right.flow_cfs ~ "SAME",
            TRUE ~ NA_character_
          )
        )
    })
  ) %>%
  select(-flow_images) %>%
  unnest(data) %>% 
  rename(user_rank = rank)
```


# Introduction

Two high school interns were recruited by USEPA Region 7 to annotate FPE photos at two stations (`West Brook 0_01171100` and `Avery Brook_Bridge_01171000`) both of which have observed flow data. 

The goals for this task were to:

1. test the UI/UX of the new image annotation interface,
2. estimate the average speed of a human annotator (how long does it take to annotate each image pair), and
3. estimate the accuracy of human annotators.

# Dataset

For each user and station, the annotation dataset contains the left and right images along, the associated flows for each image, the rank as selected by the user (left, right, same, or unknown) and the true rank based on the observed flows. 

```{r}
annotations %>%
  select(user_id, station_name, left.imageId, left.flow_cfs, right.imageId, right.flow_cfs, user_rank, true_rank) %>% 
  DT::datatable()
```


# Results

Following tables summarize the number of annotations for each category and station. 

```{r}
# tbl-cap: Tallied user annotations
annotations %>%
  tabyl(user_rank, station_name) %>%
  adorn_totals(where = "both") %>% 
  rename(`User Rank` = user_rank) %>% 
  knitr::kable(format.args = list(big.mark = ","), align = "rrrr")
```


```{r}
# tbl-cap: Tallied user annotations as percent of total by station
annotations %>%
  tabyl(user_rank, station_name) %>%
  adorn_percentages(denominator = "col") %>% 
  adorn_totals(where = "row") %>% 
  adorn_pct_formatting(digits = 0) %>% 
  rename(`User Rank` = user_rank) %>% 
  knitr::kable(align = "rrr")
```

## Annotator Accuracy

Annotator accuracy was evaluated by comparing the user-selected rank against the true rank for pairs where the user selected either LEFT or RIGHT. Pairs where the user selected SAME or UNKNOWN were excluded as these cannot be judged for accuracy.

```{r}
#| tbl-cap: Annotation error rates
annotations %>%
  filter(user_rank %in% c("LEFT", "RIGHT")) %>%
  mutate(correct = user_rank == true_rank) %>%
  group_by(user_id, station_name) %>% 
  summarize(error_rate = mean(!correct, na.rm = TRUE), .groups = "drop") %>% 
  pivot_wider(names_from = "station_name", values_from = "error_rate") %>% 
  adorn_pct_formatting(digits = 1) %>% 
  rename(`User ID` = user_id) %>% 
  knitr::kable(align = "rrr")
```

```{r}
#| fig.cap: Annotation accuracy based on left/right image flows
#| fig.height: 8
#| fig.width: 10
annotations %>%
  filter(user_rank %in% c("LEFT", "RIGHT")) %>%
  ggplot(aes(right.flow_cfs, left.flow_cfs)) +
  geom_abline() +
  geom_point(
    data = ~ subset(., user_rank == true_rank),
    aes(color = user_rank == true_rank),
    size = 3, alpha = 0.5
  ) +
  geom_point(
    data = ~ subset(., user_rank != true_rank),
    aes(color = user_rank == true_rank),
    size = 3
  ) +
  scale_x_log10() +
  scale_y_log10() +
  scale_color_manual(
    "Annotation\nAccuracy",
    labels = c("TRUE" = "Correct", "FALSE" = "Incorrect"),
    values = c("TRUE" = "gray50", "FALSE" = "orangered")
  ) +
  labs(
    x = "Right Image Flow (cfs)", y = "Left Image Flow (cfs)",
    subtitle = "Annotator accuracy when user selected LEFT or RIGHT (excludes SAME or UNKNOWN)\nRed points shows when annotator chose LEFT or RIGHT, but true comparison was opposite of what they chose"
  ) +
  facet_grid(vars(user_id), vars(station_name), labeller = "label_both") +
  theme_bw()
```

```{r}
#| fig.cap: Annotation accuracy based on relative and average flows
annotations %>%
  filter(user_rank %in% c("LEFT", "RIGHT")) %>%
  ggplot(aes(avg_flow_cfs, rel_delta_flow_cfs)) +
  geom_point(
    data = ~ subset(., user_rank == true_rank),
    aes(color = user_rank == true_rank),
    size = 3, alpha = 0.5
  ) +
  geom_point(
    data = ~ subset(., user_rank != true_rank),
    aes(color = user_rank == true_rank),
    size = 3
  ) +
  scale_x_log10() +
  scale_y_continuous(labels = scales::percent) +
  scale_color_manual(
    "Annotation\nAccuracy",
    labels = c("TRUE" = "Correct", "FALSE" = "Incorrect"),
    values = c("TRUE" = "gray50", "FALSE" = "orangered")
  ) +
  labs(
    x = "Average Flow (cfs)\n(Left Flow + Right Flow) / 2", y = "Relative Flow Difference (%)\nabs(Left Flow - Right Flow) / Average Flow",
    subtitle = "EPA Intern Accuracy when annotation is LEFT or RIGHT (excludes SAME, or UNKNOWN)\nRed points shows when annotator chose LEFT or RIGHT, but true comparison was opposite of what they chose"
  ) +
  facet_grid(vars(user_id), vars(station_name), labeller = "label_both") +
  theme_bw()
```

Cumulative errors are not currently useful as most sessions were less than 100 pairs.

```{r}
#| fig.cap: Cumulative errors over each annotation session
#| fig.width: 8
#| fig.height: 6
annotations %>%
  filter(n >= 100, user_rank %in% c("LEFT", "RIGHT"), user_rank != true_rank) %>%
  arrange(annotation_id, pair_id) %>% 
  group_by(annotation_id) %>% 
  mutate(cumul_error = row_number() / n()) %>% 
  ggplot(aes(pair_id, cumul_error)) +
  geom_line(aes(linetype = user_id, color = station_name)) +
  # scale_color_manual(
  #   "Annotation\nAccuracy",
  #   labels = c("TRUE" = "Correct", "FALSE" = "Incorrect"),
  #   values = c("TRUE" = "gray50", "FALSE" = "orangered")
  # ) +
  scale_color_brewer("Station", palette = "Set1") +
  scale_x_continuous(expand = expansion(), limits = c(0, NA)) +
  scale_y_continuous(expand = expansion(), limits = c(0, NA), labels = scales::percent) +
  labs(
    x = "Image Pair #", y = "Cumulative Fraction of Total Errors",
    linetype = "User ID",
    subtitle = "Cumulative annotation error rate over the course of each session\nOnly includes sessions with 100+ total annotations"
  ) +
  # facet_wrap(vars(annotation_id, station_name, user_id), labeller = "label_both", scales = "free", ncol = 3) +
  theme_bw()
```

```{r}
#| fig.cap: Annotation error rates during day vs night
#| fig.height: 4
annotations %>%
  filter(user_rank %in% c("LEFT", "RIGHT")) %>%
  group_by(
    annotation_id,
    user_id,
    station_name,
    day = hour(right.timestamp) %in% 7:19 & hour(left.timestamp) %in% 7:19
  ) %>% 
  summarise(n_error = sum(user_rank != true_rank) / n(), .groups = "drop") %>% 
  ggplot(aes(day, n_error)) +
  geom_col(aes(fill = user_id), position = "dodge") +
  scale_fill_brewer("User ID", palette = "Set1") +
  scale_x_discrete( labels = c("TRUE" = "Daytime Only", "FALSE" = "At least One Nighttime")) +
  scale_y_continuous(expand = expansion(c(0, 0.05)), limits = c(0, NA), labels = scales::percent) +
  labs(x = "Both Left/Right Images During Daytime (7AM-7PM)", y = "Annotation Error Rate") +
  facet_wrap(vars(station_name), labeller = "label_both") +
  theme_bw()
```

## Annotator Margin

The annotator "margin" refers to how different flows need to be between two images for the annotator to tell the difference. When the flow difference is below the "margin" then the annotator will indicate that the two images have "about the same" flow. 


```{r}
#| fig.cap: Margin distribution based on average flows and relative flow difference of image pairs
annotations %>%
  filter(user_rank != "UNKNOWN") %>%
  ggplot(aes(avg_flow_cfs, rel_delta_flow_cfs, color = user_rank)) +
  geom_point(
    data = ~ subset(., user_rank != "SAME"),
    aes(color = user_rank),
    size = 3, alpha = 0.5
  ) +
  geom_point(
    data = ~ subset(., user_rank == "SAME"),
    aes(color = user_rank),
    size = 3
  ) +
  scale_x_log10() +
  scale_y_continuous(labels = scales::percent, breaks = scales::pretty_breaks(n = 8)) +
  scale_color_manual("Annotation\nRank", values = c("LEFT" = "gray50", "RIGHT" = "gray50", "SAME" = "deepskyblue")) +
  labs(
    x = "Average Flow (cfs)\n(Left Flow + Right Flow) / 2", y = "Relative Flow Difference (%)\nabs(Left Flow - Right Flow) / Average Flow"
  ) +
  facet_grid(vars(user_id), vars(station_name), labeller = "label_both") +
  theme_bw()
```

```{r}
mean_rel_delta_flow_cfs <- mean(filter(annotations, user_rank == "SAME")$rel_delta_flow_cfs, na.rm = TRUE)
```

The cumulative distribution of the relative flow difference when annotators selected SAME. The overall mean of the relative flow differences across both users and sites was `r scales::percent(mean_rel_delta_flow_cfs)`.

```{r}
#| fig.cap: Cumulative frequency distribution of relative flow difference when users selected SAME
#| fig.width: 8
#| fig.height: 6
annotations %>%
  filter(user_rank == "SAME") %>%
  ggplot(aes(rel_delta_flow_cfs, linetype = user_id, color = station_name)) +
  stat_ecdf() +
  scale_color_brewer("Station", palette = "Set1") +
  scale_x_continuous(labels = scales::percent, breaks = scales::pretty_breaks(n = 8), limits = c(0, NA), expand = expansion(mult = c(0, 0.05))) +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1), breaks = scales::pretty_breaks(n = 8), expand = expansion()) +
  labs(
    x = "Relative Flow Difference (%)\nabs(Left Flow - Right Flow) / Average Flow",
    y = "Cumulative Frequency",
    linetype = "User ID"
  ) +
  theme_bw()
```

```{r}
annotations %>% 
  write_csv("annotations-epa-interns-may-2023.csv")
```

